Parte 1
	
	Baixar o STS
	Criar um novo projeto Spring Starter Project
	Atualizar o thymeleaf-dialect (versão 2) e o thymeleaf (versão 3)
	Acrescentar spring.thymeleaf.mode=HTML no application.properties para não ficar dando warning no thymeleaf

Parte 2

	Verificar o NOME_DO_PROJETO_Application.java, nela o main é inicializado e também é passado o nosso projeto com a possibilidade de passar argumentos "args"
	SpringApplication é uma classe do próprio Spring Boot.
	
		@SpringBootApplication
		public class KathoVinhosApplication {
		
			public static void main(String[] args) {
				SpringApplication.run(KathoVinhosApplication.class, args);
			}
		}
	
	A anotação SpringBootApplication tem uma configuração legal dentro dele, pois ele recebe "@EnableAutoConfiguration" que informa, por exemplo, quando colocamos o 
		thymeleaf ou spring data jpa que ele já vai buscar a configuração mais propícia para o projeto, sem termos que configurar na mão. Isso acontece naquele momento 
		onde acrescentamos as dependencias do projeto no ínico lá no Spring Starter Project.
		
---------------------------------------------------------------------

	Configuração do Layout
	
Parte 3

	Pesquisar no github da Algaworks o layout
		
		https://github.com/algaworks?utf8=%E2%9C%93&q=layout&type=&language=
		
		- O layout bootstrap Atacama, vem com várias configurações básicas prontas.
			- Depois de baixar o layout do github e descompactar o arquivo clicar na pasta> dist> assets> e copia todas as 4 pastas que existem lá (images, javascripts, stylesheets, vendors)
			- Ir no projeto src/main/resources/ e criar uma pasta chamada "layout" e então copiar as 4 pastas dentro dessa pasta.
			- Voltar na pasta <dist> e copiar a página "cadastro-produto.html" e copiar para dentro do projeto dentro da pasta <static> renomeando essa pagina html para "index.html", pois toda
				vez que o servidor subir ele vai buscar por uma página chamada index.html dentro da pasta <static>, ou seja ela vai rodar primeiro.
			
		- Voltar no projeto e colocar a página index.html dentro da página static, pois o spring boot vai mapear as páginas que estão dentro da pasta <static>.
		- Alterar todos os caminhos css que estão com nome "assets", pois esse caminho não existe. Agora será layout/stylesheets/algaworks.min.css, por exemplo.
		- Subir a aplicação e testar, provavelmente estará tudo certo.
			- Abrir o arquivo KathoVinhosApplication.java para poder habilitar a opção de rodar o projeto.
	
---------------------------------------------------------------------

Passo 4 fazer o cadastro do vinho

	Podemos começar de duas maneiras de baixo para cima (classes até a view) ou top down (da view até as classes).
		- Começando pelo modelo depois crio a classe que acessa o repositorio para acessar o banco de dados para buscar um vinho ou fazer uma nova inserção.
			- Hoje vamos fazer o modo top down, pois já temos o layout e assim teoricamente fica mais fácil de ver a tela pronta.
			
		- Fazer as alterações no index.html para deixar no menu lateral direito somente (Dashboard, Cadastro de vinho e Pesquisa de vinho).
		- Retirar também os links de manipulação de usuário e deixar somente a porta com setinha de sair do sistema, veja exemplo nesse index.html desse projeto.
		- Mudar onde está como cadastro de produto para cadastro de vinho.
		- Teve mais alterações mas, olhar no cadastro-vinho.html para ver como ficou.
		
	Criar a pasta vinhos dentro de templates e jogar o index.html dentro e alterar o nome para cadastro-vinho.html.
	
- Agora criar nossa classe controladora (CONTROLLERS) para manipular a exibição da url e receber as requests/response do browser.

	* Para mudar o tipo de visão para hieraquical ir setinha para baixo no package Explores> Package Presentation> Hierarquical.

	- Para a primeira exibição. Criar dentro de controller um método para exibir nossa página que agora está dentro da pasta "layout".
		Necessariamente tem que estar dentro da pasta layout, SEMPRE!
		
		@GetMapping("/vinhos/novo")
		public String novo() {
			return "vinho/cadastro-vinho";
		}
		
		- Toda vez que digitar no browser localhostOuServidor/vinhos/novo ele vai chamar a página cadastro-vinho que está dentro da pasta layout. Isso, pois o Spring
			já mapeia a pasta layout para verificar se existe o nome que foi solicitado e poder mostrar na tela.
			
	- Mesmo assim ao carregar a página vai aparecer sem a estilização css, pois o caminho não está mais batendo, pois mudamos a pasta raiz.
		Para resolver isso vamos deixar o thymeleaf tomar conta, e ao acrescentarmos o namespace (xmlns:th="http://www.thymeleaf.org") e mudarmos no elemento a forma de 
			chamar o href para o css o thymeleaf já calcula tudo isso para nós usando "th:href="@{/}. Ex: th:href="@{/layout/stylesheets/vendors.min.css}"
			
- Como essa parte está pronta vamos salvar no banco e para isso vamos fazer via @PostMapping no controller

	- Criar o model (Vinhos) dentro do pacote model.
	- Adicionar nas classes os atributos da classe (Long codigo, String nome, TipoVinho tipo e BigDecimal valor)
	
		- No atributo TipoVinho é necessário criar um Enum dele, pois ele será um combobox na tela e ele exibirá as informações que colocarmos dentro desse Enumerator.
			Dar um Ctrl + 1 e adicionar esse Enum dentro do package model.
			Adicionar os tipos Rose, Branco e Tinto.
			
		- Terminar as anotações na classe Vinho.
		
	- Obs:*** SPRING, uma coisa muito legal, no controller ele já consegue receber o objeto vindo do formulário, ou seja, no @PostMapping ele já recebe public String salvar(Vinho vinho)....
	
	- Após fazer as configurações acima, verificar se está rodando legal a página.
		Se estiver tudo certo, ao clicar no combobox vai exibir os tipos de vinho. Porém vai estar tudo com letra maiuscula. Podemos alterar isso de uma maneira muito fácil para deixar 
			tudo em minusco. 
		- Para isso vamos criar dentro de src/main/resources um novo FILE chamado "messages.properties" e escrevemos, por exemplo: tipoVinho.TINTO = Tinto
			- Depois vamos no cadastro-vinho.html no combobox e alteramos o th:text. 
			- Para utilizar os valores, substituir a descrição por uma descrição mais habitual tem que utilizar o seguinte contexto: th:text="#||.valorDaPropriedade", 
				Exemplo: th:text="{#|tipoVinho.${tipo}|}"
			- Onde o # diz ao thymeleaf que ele precisa buscar e substituir o valor o tipoVinho pelo valor que foi declarado dentro do messages.properties.
				- Se o tipoVinho ROSE = Rosé com acento, pode ser que fique desconfigurado no browser, pois o padrão pode não ser o UTF-8. Para alterar isso é necessário clicar com o botão 
					direito em messages.properties e alterar para UTF-8.
			
		PAREI EM 1:05:25
				
		
		
		 	
	
	
		
---------------------------------------------------------------------
		
		
PULO DO GATO!!!

- Live Reload
	- Serve para recarregar as alterações feitas no projeto do Spring Boot, as alterações feitas no projeto ele reconhece e altera automaticamente. Isso serve pelo menos na view e tenho utilizado 
		somente no chrome.
		- Instalar esse plugin no chrome.
		- Para utilizar foi somente necessário criar uma dependencia no pom.xml.
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		
- 

	

		
	 
	
	
		
	
		