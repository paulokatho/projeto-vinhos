Nome do vídeo: Oficina2_Spring_Algaworks_Vídeo3_Segurança_e_Deploy

Veremos:
	- Pesquisa de vinhos
	- Edição e Exclusão
	- Adicionar Segurança
	- Deploy na nuvem
	
- Colocando mensagem de sucesso.

	- Para começar é necessário acrescentar no html cadastro-vinho uma mensagem de sucesso, na verdade uma <div>.
	- Porém no controle ele faz um redirect assim que grava no banco, então é necessário acrescentar um recurso para que não se perca essa mensagem.
		- Esse recurso é o "redirectAttributes".
		- Ele deve ser inserido após a chamada do save para ter certeza que salvou no banco.
		
		- Após isso voltar no cadastro-vinho.html e verificar na div se existe alguma coisa nessa mensagem para ser exibida no browser.
			- Utilizando o objeto isEmpty do thymeleaf é possível fazer essa verificação e depois no <span> acrescentamos o th:text para exibir esse nosso
				redirectAttribute, ou seja, o conteúdo da mensagem.
				
			// *** no html
			<div class="alert  alert-success" th:if="${!#strings.isEmpty(mensagem)}">//se existir algo que não seja o isEmpty ele exibe a mensagem, "!#strings..."
				<span th:text="${mensagem}"></span> //exibindo o conteúdo da mensagem
			</div>
			
			// *** no controller
			@PostMapping("/vinhos/novo")
			public ModelAndView salvar(@Valid Vinho vinho, BindingResult result,
										RedirectAttributes attributes) { //declarando o RedirectAttibutes no cabeçalho
				if (result.hasErrors()) {
					 return novo(vinho);
				}		
				vinhos.save(vinho);
				attributes.addFlashAttribute("mensagem", "Vinho salvo com sucesso!");//preenchendo o attributes com a mensagem de sucesso
				
				return new ModelAndView("redirect:/vinhos/novo");
			}
			
			Esse redirectAttributes cria uma mini sessão para fazer esse trabalho para não perder a mensagem ao fazer o redirect.
				- Depois de salvar no banco e mostrar a mensagem o spring exibe na url um "jsessionid".
					- http://localhost:8080/vinhos/novo;jsessionid=3EBCC3C701A454034FF27C9B493DBD3D
					

- Partindo para a tela de pesquisa de vinhos. 

	- Nesse momento será possível ver que existe uma duplicidade de códigos e isso não é legal. Nesse momento será visto uma maneira de trabalhar melhor com o 
		layout e utilizar melhor os recursos do thymeleaf e deixar a aplicação mais enxuta.
		
	- Ir até a pasta vinho dentro de resources>template e criar uma nova página do tipo html.file prestando atenção para setar ela como html-5. Nome: pesquisa-vinhos.html
		- Colar a página de cadastro-vinho na página de pesquisa para utilizarmos o mesmo layout. 			
	- Para reutilizarmos código e deixarmos melhor nossa página vamos utilizar o layout-dialect que cria um layout reutilizavel.
	
	- Retirar da página de pesquisa e cadastro a div que informa que o sistema está "Carregando..."
	- O form terá a pesquisa implementada via GET.
	- Apagar os outros atributos da página, deixar somente a pesquisa por nome.
		- Também será utilizado o tipo de input com "div class= input-group" e "span class=input-group-btn" e acrescentar outro "span class= glyphicon-search".
		- Toda essa configuração tem no site do bootstrap como implementar esse tipo de pesquisa com botãozinho de pesquisa e placeholder, etc...
		
		
		<form method="GET" class="form-vertical>
			<div class="form-group">
				<div class="input-group">
					<input id="nome" type="text" class="form-control" placeholder="Pesquise pelo nome"/>
					<span class="input-group-btn">
						<button class="btn btn-default" type="submit">
							<span class="glyphicon  glyphicon-search"></span>
						</button>
					</span>
				</div>
			</div>
		</form>
			
	- Agora ir no VinhosController e acrescentar o método pesquisar().
	- Lembrando que para essa pesquisa, mais simples vamos utilizar os recursos do spring data jpa que já vem com vários metodos de pesquisa implementados e que somente
		precisamos fazer a chamada deles e utilizar. Relembrando eles estão sendo chamados no repository (interface).
	- Implementar o vinhos.findAll() para ver se está trazendo todos os registros corretamente.
	
		// Esse GetMapping tem que mudar para @GetMapping, pois agora a url "/vinhos" está sendo mapeada no cabeçalho da classe controller
		@GetMapping("/vinhos") // quando digitar essa url ele cai nesse método
		public ModelAndView pesquisar() {
			ModelAndView mv = new ModelAndView("/vinho/pesquisa-vinhos"); //este caminho está dentro da pasta vinho arquivo "pesquisa-vinhos".
			mv.addObject("vinhos", vinhos.findAll());
			return mv;
		}
	
	- Se observarmos ja existe muitos codigos duplicados com o "/vinhos". Já podemos melhorar isso.
	- Para isso vamos adicionar o @RequestMapping("/vinhos") em cima da assinatura da nossa classe VinhosController, e com isso todos os métodos que utilizarem a chamada
		a url que contenha "/vinhos" já virá por default.
		- Sendo assim não é mais necessário utilizar nos métodos a chamada a url contendo "/vinhos", pois agora todos já vem por default. Retirar dos métodos e no 
			método GET da pesquisa deixa sem nada.
			
				@Controller
				@RequestMapping("/vinhos")
				public class VinhosController { }
			
		- Até aqui então criamos a tela de pesquisa e implementamos a VinhosController para receber a chamada ao métode de pesquisa e melhoramos a reutilização
			de codigos acrescentando o @RequestMapping no cabeçalho da classe controller e também criamos a consulta .findAll() para trazer todos os nomes
			de vinhos cadastrados usando spring data jpa.
			
- Agora vamos desenvolver a parte no html 5 para exibir o resultado da pesquisa.
	
	- Precisamos receber um filtro no controller para receber esse nome do vinho e realizar a pesquisa e o metodo pesquisar no controller receber esse filtro "nome".
	- No package repository criar uma classe java dentro do pacote <repository> filter> com nome "VinhoFilter".
	- Os atributos que vamos criar nesse caso é somente pelo nome, então vamos criar o atributo nome do tipo String e gerando o getter e setter.
		- Esse filtro nome no package filter será amarrado na view thymeleaf de pesquisa, assim como na tela de cadastro os fieldes estão amarrados com o th:object.
			- Então no <form> da pesquisa-vinhos acrescentar o th:obejct="${vinhoFilter}", para deixar disponível para o formulário os objetos do vinhoFilter.
			- E no input acrescenta o th:field="*{nome}" para amarrar um campo a um atributo do objeto.
				- Assim quando for submeter a pesquisa vai deixar disponível esse objeto e os valores dele.
		
		- Então para pegar os valores desse objeto vamos até o VinhosController e acrescentamos ele no método de pesquisa como parametro. Dessa forma o spring
			já vai saber que está criando um objeto do tipo VinhoFilter e o spring entende isso. Além de que se o objeto já estiver vindo setado com algum
			valor no field do formulario html o spring já cria o objeto do tipo VinhoFilter e seta o valor do atributo do tipo nome.
			
		- Agora para criar a pesquisa passando o filtro nome é só ir até a interface Vinhos em repository e vamos criar uma pesquisa personalizada 
			com esse filtro nome.
			Lembrando, que todo método de uma interface é public. Sempre. Então em uma interface não é necessario colocar public na frente 
				de um método, como está feito abaixo, mas não tem importancia colocar.
			
		- Criar um List do pacote java util, vejamos como o spring data jpa é incrível.
		
			public List<Vinho> findByNomeContainingIgnoreCase(String nome);
			
			- Então essa pesquisa vai pesquisar por nome (findBy), containing (contendo qualquer letra, então ele coloca um % %, no fim e no começo do que 
				foi digitado no formulário) e o IgnoreCase (não importa se é maiusculo ou minusculo).
				
			- Ou poderia ficar.
			
				public List<Vinho> findByNomeAndTipoVinhoContainingIgnoreCase(String nome, TipoVinho tipo);
				
				- Lembrando que tem que ir passando os parametros, mas quando fica meio grande já começa ficar feio...rsss.
				
		- Voltando agora no VinhosController acrescentar no nosso método mv.addObject(.....) a nossa pesquisa para deixar disponivel essa nossa lista de vinhos.
		
			mv.addObject("vinhos", vinhos.findByNomeContainingIgnoreCase(
							Optional.ofNullable(vinhoFilter.getNome()).orElse("%")));
			
			- Optional começou no java 8, pois a página quando é carregada pode vir com o valor nulo, então caso venha com nulo ele passa % e traz todos os vinhos.
				Poderia ter feito um comparador ternario ou outra forma, mas assim fica bem legal.
				
			- Agora para ver se está funcionando é só ir na tela de pesquisa-vinhos no browser e digitar algum nome ou letra e verificar se ele
				está sendo exibido na url, se estiver funcionando tudo bonitinho será exibido na url, após o link principal.
	

- Criando a tabela para exibir o resultado da pesquisa.

	- Olhar em getbootstrap.com/css/#tables e escolher uma tabela para implementarmos na pesquisa-vinhos. Essa é uma table-responsive.
	- Colar o código logo abaixo do </form>. 
	
		<div class="table-responsive">
			<table id="tabela-produtos" class="table  table-striped  table-bordered  table-hover  table-condensed  js-sticky-table">
				<thead class="aw-table-header-solid">
					<tr>
						<th class="av-table-vinhos-col-codigo">Código</th>
						<th>Nome</th>
						<th class="av-table-vinhos-col-tipo">Tipo</th>
						<th class="av-table-vinhos-col-valor">Valor</th>
						<th class="av-table-vinhos-col-icons" sec:authorize="hasRole('ROLE_CADASTRAR_VINHO')"></th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="vinho : ${vinhos}">
						<td th:text="${vinho.codigo}" class="text-center">1</td>
						<td>
							<a th:href="@{/vinhos/{codigo}(codigo=${vinho.codigo})}" th:text="${vinho.nome}" sec:authorize="hasRole('ROLE_CADASTRAR_VINHO')"></a>
							<span th:text="${vinho.nome}" sec:authorize="not hasRole('ROLE_CADASTRAR_VINHO')"></span>
						</td>
						<td th:text="#{|tipoVinho.${vinho.tipo}|}">Tinto</td>
						<td th:text="|R$${{vinho.valor}}|" class="text-right">55,00</td>
						<td class="text-center" sec:authorize="hasRole('ROLE_CADASTRAR_VINHO')">
							<i class="fa  fa-trash" style="cursor:pointer"
								data-toggle="modal" data-target="#confirmaExclusaoModal"
								data:nome="${vinho.nome}" 
								data:url-apagar="@{/vinhos/{codigo}(codigo=${vinho.codigo})}"></i>
						</td>
					</tr>
					<tr th:if="${vinhos.empty}">
						<td colspan="5">Nenhum vinho cadastrado</td>
					</tr>
				</tbody>
			</table>
		</div>
		
	- Agora dentro do pacote src/main/resources - static/ criar uma pasta chamada stylesheets e dentro dela criar um novo file
		chamado "vinhos.css". Essas classes são usadas no table acima.
		
		.av-table-vinhos-col-codigo, .av-table-vinhos-col-icons {
			width: 60px;
			text-align: center;
		}
		
		.av-table-vinhos-col-tipo {
			width: 100px;
		}
		
		.av-table-vinhos-col-valor {
			width: 150px;
			text-align: right;
		}
		
	- Acrescentar no html o link do css.
		
		<link rel="stylesheet" type="text/css" href="@{/stylesheets/vinhos.css}"/>
		
	- Existe um porém, ao rodar o projeto ele está vindo como R$4.90, mas no formato de moeda brasileiro usamos 4,90, então
		o thymeleaf reconhece um padrão e transforma em formato portugues. É só acrescentar {{vinho.valor}} como no código abaixo.
		
		<td th:text="|R$${{vinho.valor}}|" class="text-right">55,00</td>
		
	- Testar a aplicação: Cadastrar alguns vinhos e depois fazer a pesquisa para ver se está pesquisando corretamente.
	
- Melhorando o layout para arrumar as duplicações de código e também deixar mais bonito nosso código.

	- Sera usado o layout-dialect.
	- Então dessa forma é deixado um layout que será chamado na página que formos criando, assim será utilizado somente uma vez nosso código.
	- Veja no pom.xml que já acrescentamos o <thymeleaf-layout-dialect>2.12 que será utilizado junto com a versão 3.0.3 do thymeleaf.
		
		<!-- SEMPRE QUE ATUALIZAR O THYMELEAF.VERSION TEM QUE ATUALIZAR O THYMELEAF DIALECT -->
		<thymeleaf.version>3.0.3.RELEASE</thymeleaf.version>
		<thymeleaf-layout-dialect.version>2.1.2</thymeleaf-layout-dialect.version>
		
	- Agora vamos criar nosso layout padrão:
		- Dentro da pasta templates criar uma pasta chamada <layout>.
		- Copiar a página de cadastro-vinho para dentro dessa pasta layout e renomear o arquivo para "layou-padrao".
		- Será utilizado algumas partes da pagina cadastro para fazer o layout padrão e o restante vamos apagando.
		- Para usar o layout é necessário acrescentar um novo namespace "xmlns:layout".
			xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
			
		- Dentro dessa página será deixado tudo que será de comum para as outras páginas que serão utilizadas no sistema.
			- Então continuará o cabeçalho e o menu.
			- Apagar tudo que estiver entre <section class="aw-layout-content  js-content" layout:fragment="conteudo"> apagar o que tem aqui </section>
				- Para poder usar/estender essa página padrão é que acrescentamos o layout:padrao e também o layout:fragment="conteudo", pois o código novo
					vai ficar dentro do <section>fica aqui o codigo da pagina</section>
					
		- Para utilizar esse layout padrão dentro da página de cadastro-vinho, por exemplo, é necessário acrescentar o namespace xmlns:layout também e agora uma
			novidade, o layout:decorated.
				
				xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
				layout:decorate="~{layout/layout-padrao}" // aqui diz que a página de cadastro-vinho será decorada com o layout-padrao
			
			- Apagamos o que está no layout padrao e quando começar o <section> da página de cadastro acrescentamos <section layout:fragment="conteudo">
			- Fazer o teste na pagina de cadastro de vinhos.
			
		- Agora podemos melhorar também a pagina de pesquisa, lembrando que no <head> tem um link para o css que pode ser deixado na página.
		
		- Ir no vinhos.css e renomar para pesquisa-vinhos.css. e lembrar de alterar também em pesquisa-vinhos.html
		
			- Excluir da pagina de pesquisa todo o código duplicado, assim como na pagina de cadastro e testar no browser.
			
- Vamos implemantar agora a EDIÇÃO.

	- A idéia é a seguinte, vamos utilizar a url que foi criada no table para acessar a edição do registro. Quando clicarmos no nome de algum vinho esse link
		passa o código do vinho na url que faz a pesquisa daquele vinho e retorna o registro completo para podermos editar.
		A url passa a ficar assim: localhost:8080/vinhos/2, por exemplo, onde esse 2 é o código do vinho.
	- Para criar essa url com thymeleaf é bem tranquilo, vá ate a página pesquisa-vinhos onde a table <tbody> é preenchida e onde está o href que forma o 
		link vamos acrescentar o th:href para usar o thymeleaf. O "@" é para resolver o contexto da aplicação, quando tiver.
		O {codigo} é um parâmetro variavel e precisa estar entre chaves {}. Agora para definir o valor desse parametro variavel uso (codigo = ${vinho.codigo}),
			essa variavel "vinho." vem do th:each, então a url {codigo} que será criada vai ser preenchida com o código que vai vir de (codigo = ${vinho.codigo}).
			Veja abaixo como ficou.
				
				th:href="@{/vinhos/{codigo}(codigo=${vinho.codigo})}"
				
		O trecho ficou assim:
			
			<tr th:each="vinho : ${vinhos}">
					<td th:text="${vinho.codigo}" class="text-center">1</td>
					<td>
						<a th:href="@{/vinhos/{codigo}(codigo=${vinho.codigo})}" th:text="${vinho.nome}" sec:authorize="hasRole('ROLE_CADASTRAR_VINHO')"></a>
						<span th:text="${vinho.nome}" sec:authorize="not hasRole('ROLE_CADASTRAR_VINHO')"></span>
					</td>
				
			- Testando, na tela é só ir na pesquisa e passar o mouse sobre o link e então observe que no canto inferior esquerdo vai aparecer a url com 
				o código da url que está aparecendo.
				
	- Se clicar não vai aparecer nada, pois não tem nada implementado ainda e para isso vamos no controller, pois ainda não temos nenhuma url mapeada 
		que recebe "vinhos/2", ou seja, uma url que recebe vinhos com um código.
	- Para implementar usamos o model and view editar() que tem anotação @GetMapping que recebe uma variavel para compor a url.
	
		@GetMapping("/{codigo}")
		public ModelAndView editar() { }
		
		Definimos para o mapeamento Get uma variavel para ser acrescentada após a parte "/vinhos". O que está entre {} é a variavel que está vindo do 
			field que th:href que mapeamos no html.
	
	- Agora para o método editar saber que o código que vem do get será usado para fazer a pesquisa do vinho e trazer o vinho referente ao código passado,
		fazemos o seguinte.
		
			@GetMapping("/{codigo}")
			public ModelAndView editar(@PathVariable Long codigo) { 
				Vinho vinho = vinhos.findOne(codigo);
				return novo(vinho);
				
			- @PathVariable: Informa que o parametro Long codigo vai receber o valor que vier do @GetMapping {codigo}
			- Para pesquisar o vinho e trazer somente um registro que será o que iremos utilizar para editar usamos ".findOne()" que traz somente um 
				vinho específico.
			- return(novo) funciona para trazer a página de cadastro de vinho com os dados preenchidos com o que veio da pesquisa .findOne(). Então 
				a pagina será preechida com as informações do vinho para que possam ser editadas. Já estamos passando um vinho preechido.
	
	- Testar a página e verificar se está trazendo os vinhos cadastrados.
	- Se caso não funcionar é porque o controller no @GetMapping que recebe a requisição para exibir a url está sem o mv.addObject(vinho); então é 
		só acrescentar no método.
		
		@GetMapping("/novo")
		public ModelAndView novo(Vinho vinho) {
			ModelAndView mv = new ModelAndView("vinho/cadastro-vinho");
			mv.addObject(vinho); // *** se não rodar poder ser essa linha aqui
			mv.addObject("tipos", TipoVinho.values());
			return mv;
		} 
	

- Porém depois de entrar em modo de edição clicando no link e editando o vinho, se clicar em salvar vai dar erro, pois está recebendo um @GetMapping("/{codigo}")
	e para salvar tem que ser o método @Post. Então vamos ajeitar isso aí.
	
	- Abra o cadastro-vinho e ir até o form method="POST" e acrescentar o th:action para que ao clicar ele passe a url informada no action para o metodo @Post
		do controller.
		
			<form method="POST" class="form-vertical  js-form-loading" 
				th:object="${vinho}" th:action="@{/vinhos/novo}">
	
	- Mas ainda falta um detalhe, se subter o formulario dessa forma ainda não vai editar, ele vai acrescentar um novo registro, pois não informamos
		em nenhum momento o código do vinho para que o spring saiba que é uma edição.
		- Então vamos até o cadastro-vinho acima do <div class> que contém o input do nome e acrescentamos um input type hidden e acredite, só isso
			resolve...
			
			<input type="hidden" th:field="*{codigo}"/> //esse campo hidden aqui
			
			<div class="form-group">
				<label for="nome">Nome</label>
				<input id="nome" type="text" class="form-control" th:field="*{nome}"/>
			</div>
						

- Vamos partir agora para a exclusão do registro. Ao clicar na lixeirinha do grip efetuar a exclusâo.

	- Para implementar vamos até getbootstrap.com/javascript/#modals e procure pelos botões de de teste e veja que tem 3 tipos, Large, small e launch demo modal.
		- Vamos usar o small. Esse modal (caixa de popup) é para perguntar se o usuário tem certeza que quer excluir o vinho.
		- Antes de fechar o </section> acrescentar o trecho de código para implementar o modal. Veja como ficou:
		
			<div class="modal  fade" id="confirmaExclusaoModal" tabindex="-1" role="dialog">
				<div class="modal-dialog" role="document">
			  		<div class="modal-content">
			  			<form th:action="@{/vinhos}" method="POST">
			  				<input type="hidden" name="_method" value="DELETE"/>
			     			<div class="modal-header">
				       			<button type="button" class="close" data-dismiss="modal" aria-label="Close">
				       				<span aria-hidden="true">&times;</span>
				       			</button>
				       			<h4 class="modal-title" id="myModalLabel">Excluir vinho</h4>
			     			</div>
			     			<div class="modal-body">
			       				<span>Tem certeza?</span>
			     			</div>
			     			<div class="modal-footer">
			       				<button type="button" class="btn  btn-default" data-dismiss="modal">Cancelar</button>
			       				<button type="submit" class="btn  btn-primary">Excluir</button>
			     			</div>
			     		</form>
			  		</div>
				</div>
			</div>					
			
	- A única diferença para o que está no site do bootstrap é que foi colocado um <form th:action="@{/vinhos}" method="POST">
		 para que possamos apagar um vinho.
	- Para fazer aparecer o modal tem a documentação lá no site do bootstrap, mas é basicamente acrescentar no icone do lixinho e acrescentar
		essas duas classes: data-toggle="modal" data-target="#confirmaExclusaoModal". Lembrando que o data-target é o id do nosso modal.
		
		<i class="fa  fa-trash" style="cursor:pointer" data-toggle="modal" data-target="#confirmaExclusaoModal"
							data:nome="${vinho.nome}" data:url-apagar="@{/vinhos/{codigo}(codigo=${vinho.codigo})}">
		</i>
	
	- Vendo a documentação do bootstrap também é possível observar que podemos utilizar o javascript para exibir conteúdos diferentes
		dentro dos modais, de acordo com o código do vinho, por exemplo.
		
	- Importante: não podemos deixar esse js dentro e nem fora do <section> do pesquisa-vinhos, pois se não ele não carrega esse js.
		Também não dá para colocar dentro do layout padrão abaixo dos outros javascript, pois se não dá erro. Então a maneira correta
			é utilizando th:block do thymeleaf que já vem para resolver esses conflitos de forma desacoplada.
		- Criamos um block dentro do layout padrão e depois chamamos ele nas páginas, nesse caso pesquisa-vinhos. No pesquisa-vinhos
			chamamos o block e passamos o js extra que queremos exibir. 
				Colocamos no layout padrao colocamos antes de fechar o </body>.
				
					<th:block layout:fragment="javascript-extra"></th:block>
					
				No pesquisa-vinhos antes de fechar o </body> também.
				
					<th:block layout:fragment="javascript-extra">
						<script th:src="@{/javascripts/excluir-vinho-modal.js}"></script>
					</th:block>
	
	- Esse js pode ser direto na pagina ou dessa maneira acima colocando uma pasta e criando um arquivo e depois somente chamar ele.
	
	- A idéia agora para funcionar esse js é que esse js pegue o nome do vinho que está vindo dentro o icone <i>. Para isso vamos
		criar alguns elementos a mais no <i> da lixeira para capturar essas informações.
		Exemplo: acrescentar um data-nome="..." e para nos auxiliar nisso vamos usar um carinha do thymeleaf.
		
		- Para utilizar esse recurso do thymeleaf temos que acrescentar a dependencia dele no pom.xml é o artifactId 
			thymeleaf-extras-data-attribute.
			
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency>
			
			Também tem que ir nas propriedades do pom.xml para acrescentar a versão do thymeleaf data attribute.
			
				<thymeleaf-extras-data-attribute.version>2.0.1</thymeleaf-extras-data-attribute.version>	
	
		- Acrescentar na pagina de pesquisa outro namespace para usar o data attribute.
		
			xmlns:data="http://www.thymeleaf.org/extras/data-attribute"
			
		- Só acrescentar no <i> o data:nome="${vinho.nome}"  e assim no js é possível pegar esse valor com var nome = botao.data('nome');
			Agora temos o nome do vinho.
		
			- Assim é possível pegar esse nome que capturamos e inserir ele dentor do <span> que apresenta o Tem certeza?
				Nessa div: 
				
					<div class="modal-body">
						<span>Tem certeza?</span>
	     			</div>
		
		- Proximo passo vamos pegar o modal (var modal = $(this);)
			Agora esse var modal se torna um objeto jquery.
		
		- Ficou assim o js/jquery: Mas essa ainda não é a versão final de como ficará esse js/jquery
		
			<th:block layout:fragment="javascript-extra">
				<script>
					$('#confirmaExcluisaoModal').on('show.bs.modal', function (event) {
						var botao = $(event.relatedTarget);
						var nome = botao.data('nome'); //pegamos nosso data:nome do thymeleaf aqui
						
						var  modal = $(this); //capturando o modal
						
						//Aqui procurando dentro de modal do modal-body a classe span e acrescentando o .html com a string e o nome do vinho
						modal.find('.modal-body span').html('Tem certeza que deseja excluir <strong>' + nome + '</strong>?');
					});
				</script>
			</th:block>
		
		- Agora só reiniciar o servidor e testar o link para ver se está apresentando o modal com o nome correto do vinho.
		
 	- Esta na hora de fazer a exclusão propriamente dita.
 	- Ir até controller e acrescentar um método para fazer esse delete. Ele vai receber o método delete do http.
 	
 		@DeleteMapping("/{codigo}")
		public String apagar(@PathVariable Long codigo, RedirectAttributes attributes) {
			vinhos.delete(codigo);
			attributes.addFlashAttribute("mensagem", "Vinho removido com sucesso.");
			return "redirect:/vinhos";
		}

	- Colocar na tela de pesquisa a mensagem de sucesso ao apagar. Mas lembrando que por enquanto o código ficara duplicado, porém será feito de
		maneira melhor logo menos.
		- Na pesquisa colocar a <div alert-success>, assim como na página de cadastro.
			
			<div class="alert  alert-success" th:if="${!#strings.isEmpty(mensagem)}">
				<span th:text="${mensagem}"></span>
			</div>
			
	- Voltar na pesquisa e agora temos que fazer o spring entender que estamos passando o método http "DELETE" e para isso o spring nos fornece um
		recurso bacana, <input type="hidden" name="_method" value="DELETE"/>
		Esse recurso é colocado dentro do nosso formulário em baixo do <form> que tem o método "POST". Dessa maneira o spring entende que está sendo 
			enviado um método "DELETE" e ele já cai no método @DeleteMapping no nosso controller.
							
	- Após isso é necessário saber o código do vinho que será enviado para o metodo delete e para isso vamos utilizar o js/jquery novamente e utilizar
		o data-attribute do thymeleaf novamente dentro do botão lixo <i>. 
		 	
		 	data:url-apagar="@{/vinhos/{codigo}(codigo=${vinho.codigo})}"></i>
		 	
	- Ir no js da pesquisa acrescentar a url
	
		var url = botao.data('url-apagar'); //pegando o valor do data:url-apagar
		
	- Ficou assim: 
	
		<th:block layout:fragment="javascript-extra">
			<script>
				$('#confirmaExcluisaoModal').on('show.bs.modal', function (event) {
					var botao = $(event.relatedTarget);
					var nome = botao.data('nome'); //pegamos nosso data:nome do thymeleaf aqui
					var url = botao.data('url-apagar');
					
					var  modal = $(this); //capturando o modal
					var form = modal.find('form'); //buscar dentro do form o nome 'form'
					form.attr('action', url); // attr é um atributo do bootstrap
					//Aqui procurando dentro de modal do modal-body a classe span e acrescentando o .html com a string e o nome do vinho
					modal.find('.modal-body span').html('Tem certeza que deseja excluir <strong>' + nome + '</strong>?');
				});
			</script>
		</th:block>
		
	- Lembrando que colocamos tudo isso dentro de um formulario, pois cada vinho terá uma url diferente com seu código exibido na url para completar a url
		e saber qual vinho está sendo selecionado no link do grip para deletar, assim como para salvar.
		
		- Então agora temos o crud completo da nossa aplicação.
		
- Mas ainda falta terminar nosso projeto com a SEGURANÇA.

	- Acrescentar duas dependencias no pom.xml para utilizar o spring security, uma é o proprio spring security e a outra é uma exentensão do thymeleaf para
		ser utilizado com o spring security. E também acrescentar o a versão do thymeleaf extras spring security nas propriedades do pom.xml.
		
	- Apos adicionar essa dependencia e rodar novamente o servidor de aplicação o projeto já está com segurança. Ao rodar novamente o projeto no browser ele já 
		pede o usuario e senha. Basta informar usuario: user e senha: "a senha que ele passar no console da aplicação do eclipse".
	- A senha é muito grande e complexa e precisamos mudar ela. Para isso vamos criar uma nova classe em com.katho.vinhos.config, por exemplo. O nome da clsse 
		será SecurityConfig. 
	- Acrescentar na classe a assinatura @EnableWebSecurity e extender a classe WebSecurityConfigurerAdapter, dessa forma já teremos vários metodos para nos
		auxiliar, como acrescentar usuarios, senhas e grupos de usuarios que pode ser por banco de dados ou por memoria mesmo, que será nosso caso para
		agilizar o desenvolvimento.
		
		@EnableWebSecurity
		public class SecurityConfig extends WebSecurityConfigurerAdapter{
		
			@Override
			protected void configure(AuthenticationManagerBuilder auth) throws Exception {
				auth.inMemoryAuthentication()
				.withUser("joao").password("joao").roles("PESQUISAR_VINHO").and()
				.withUser("maria").password("maria").roles("CADASTRAR_VINHO", "PESQUISAR_VINHO");
			}
				
		//tudo o que eu quiser ignorar para não pedir user e senha coloc aqui
			@Override
			public void configure(WebSecurity web) throws Exception {
				web.ignoring()
					.antMatchers("/layout/**");
			}			
		}
		
		- Dentro da pasta de layout que ganhamos da algaworks e dentro da pasta dist tem um "login.html". Para usarmos como modelo.		
		- Então como ainda não tenho a tela de login vamos deixar algo para precisar ficar colocando login a todo momento. Por isso
			o ignoring().
		- Da mesma forma que no método configure() acima foi concatenando com "and do AuthenticationManagerBuilder" é possível fazer isso no método abaixo
			configure(WebSecurity web) e assim ir concatenando as excessões.
		
- Agora ir até a pasta template e acrescentar um novo file chamado "login.html".
- Mas agora para usar o nosso layout vamos usar o layout:decorate e layout-simples. Nesse layout-simples não vai ter o menu lateral nem o botão de logout, será 
	o layout bem mais simples mesmo.
	
	- Na pasta layout criar um novo file do tipo html para montar esse layout simples. 
	- Nos 2 arquivos html criados inserir o código fonte.
	
	- longin:
		<!DOCTYPE html>
		<html xmlns="http://www.w3.org/1999/xhtml"
			xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
			xmlns:th="http://www.thymeleaf.org"
			layout:decorate="~{layout/layout-simples}"> <!--Decorando com layout-simples-->
		
		<th:block layout:fragment="conteudo">
			<form th:action="@{/login}" method="POST">
				<div class="aw-simple-panel">
					<img alt="AlgaWorks" th:src="@{/layout/images/logo-gray.png}"/>
					
					<div class="aw-simple-panel__message">
						Por favor, faça o login.
					</div>
					
					<div class="aw-simple-panel__message  is-error" th:if="${#bools.isTrue(param.error)}">
						O usuário e/ou senha não conferem
					</div>
					
					<div class="aw-simple-panel__box">
						<div class="form-group  has-feedback">
							<input type="text" class="form-control  input-lg" placeholder="Seu usuário" 
								autofocus="autofocus" name="username"/>
							<span class="glyphicon  glyphicon-envelope  form-control-feedback"></span>
						</div>
						
						<div class="form-group  has-feedback">
							<input type="password" class="form-control  input-lg" placeholder="Sua senha" name="password"/>
							<span class="glyphicon  glyphicon-lock  form-control-feedback" ></span>
						</div>
						<div class="form-group">
							<button type="submit" class="btn  btn-primary  btn-lg  aw-btn-full-width">Entrar</button>
						</div>
					</div>
					
				</div>
			</form>
		</th:block>
		</html>
 
 	- form th:action="@{/login}" vai submeter o forumalario para "url/login". Também configure o usuario name="username" e a senha name="password".
 	
 	- Então na hora de submeter o formulario com o método POST o spring está esperando um username e um password.
 	
 	- Codificação do layout simples.
 	
	 	<!DOCTYPE html>
		<html lang="pt"
			xmlns="http://www.w3.org/1999/xhtml"
			xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
			xmlns:th="http://www.thymeleaf.org">
		<head>
		  <meta charset="UTF-8"/>
		  <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
		  <meta name="viewport" content="width=device-width, initial-scale=1"/>
		
		  <title>Spring e Layout Atacama</title>
		
		  <link rel="stylesheet" type="text/css" th:href="@{/layout/stylesheets/vendors.min.css}"/>
		  <link rel="stylesheet" type="text/css" th:href="@{/layout/stylesheets/algaworks.min.css}"/>
		  
		  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
		  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
		  <!--[if lt IE 9]>
		    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
		    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
		  <![endif]-->
		</head>
		
		<body class="aw-layout-simple-page">
		
			<div class="aw-layout-simple-page__container">
				<th:block layout:fragment="conteudo"/>
			</div>
			
			<script th:src="@{/layout/javascripts/vendors.min.js}"></script>
			<script th:src="@{/layout/javascripts/algaworks.min.js}"></script>
		
		</body>
		</html>
		
	- Já está quase pronto o layout.
	- No caso o spring tem que saber que a url está sendo encaminhada e para isso é necessário criar um novo método em SecurityConfig e configurar certinho.
		O configure(HttpSecurity http) e esse é o método que mais trabalha quando se está trabalhando com o spring security, pois aqui configura quem 
			pode ver uma determinada url, o mapeamento da url e etc.
	- Voltar no SecurityConfig para inserir o novo método de controle de acessos http.
	
		@Override
		protected void configure(HttpSecurity http) throws Exception {
			http
				.authorizeRequests() //autoriza requisições, autorizando as requisições
					.antMatchers("/vinhos").hasRole("PESQUISAR_VINHO") //que se encontram em /vinhos e hasRole "tenham a regra" PESQUISAR_VINHO"
					.antMatchers("/vinhos/**").hasRole("CADASTRAR_VINHO") // ant é o método padrão para identificação
					.anyRequest().authenticated() // qualquer requisição autenticada
					.and()
				.formLogin() // ao formulário de login quem pode ter acesso?
					.loginPage("/login") // a pagina de login na url /login
					.permitAll() //todos tem acesso a pagina de login, ou seja, página pública
					.and()
				.logout() // para logout
					.logoutRequestMatcher(new AntPathRequestMatcher("/logout")); //assim fica facil fazer logout, só acrescentar o link no layout padrão na "portinha sair"
		}		
	 
	 - Precisamos criar agora o controller para conseguirmos chegar na nossa página de login "/login" do .loginPage("/login")
	 - Ir até o pacote controller e criar uma class SegurancaController.
	
	- Prestar bastante atenção nos pacotes do import para ver se estão vindo do lugar certo.
	
		import org.springframework.security.core.annotation.AuthenticationPrincipal;
		import org.springframework.security.core.userdetails.User;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		
		@Controller
		public class SegurancaController {
			
			/* @AuthenticationPrincipal entrega a sessão para o spring, é possivel pegar a sessão, o nome do usuario e etc.
				essa anotação também é possível utilizar em qualquer controlador. 
				Também é possivel estender essa classe User e criar seu próprio User para obter mais informações, por exemplo
				outras informações do usuário que você deseje.
			*/
			
			@RequestMapping("/login")
			public String login(@AuthenticationPrincipal User user) {
				if (user != null) {
					return "redirect:/vinhos";
				}
				return "login";
			}
		
		}
				 
	 	@AuthenticationPrincipal entrega a sessão para o spring, é possivel pegar a sessão, o nome do usuario e etc.
		essa anotação também é possível utilizar em qualquer controlador. 
		Também é possivel estender essa classe User e criar seu próprio User para obter mais informações, por exemplo
		outras informações do usuário que você deseje.
	
			
- Se acessarmos a página e o login não for permitido o servidor vai retornar erro 403 e vai quebrar a página, então vamos arrumar e deixar
	um pouco mais bonitinho.
	
	- Ir em templates e criar um pasta chamada error e crie um novo arquivo chamado 403.html. 
		Copiar o cabeçalho de outra página e vamos pegar o conteúdo da página de 404 - Acesso negado.
	- Nesse ponto já é possível testar a página, nela tem um botão para voltar para a página principal.
	
	Página 403.html:
	
		<!DOCTYPE html>
		<html xmlns="http://www.w3.org/1999/xhtml"
			xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
			xmlns:th="http://www.thymeleaf.org"
			layout:decorate="~{layout/layout-simples}">
			
		<th:block layout:fragment="conteudo">
		
			<div class="aw-error-panel">
				<h1 class="aw-error-panel__code">
					<i class="fa  fa-location-arrow"></i> 403
				</h1>
				
				<h2 class="aw-error-panel__title">Acesso negado</h2>
				
				<div class="aw-error-panel__description">
					Desculpe, você não está autorizado a acessar a página que solicitou. 
					Se você acha que isso é um engano, entre em contato com a gente.
					<br/><br/>
					<a href="javascript:history.back()" class="btn  btn-primary">Voltar para a página inicial</a>
				</div>
			</div>
		</th:block>			
		</html>	
		
	- Agora para aparecer o botão de logout "portinha" no canto superior direito da página é só ir na página layout-padrao e e procurar
		o trecho abaixo e descomentar. Como no exemplo abaixo.
		
		<ul class="nav navbar-nav  navbar-right">
	    	<li>
	    		<p class="navbar-text" th:text="${#authentication.name}"></p>
	    	</li>
	      	<li>
	        	<a th:href="@{/logout}"><em class="fa  fa-sign-out"></em></a>
	      	</li> 
	    </ul>
	   
	- Nesse momento podemos acrescentar o nome do usuário no canto ao lado do botão de logout para saber qual usuário está logado.
	- Para ajudar vamos acrescentar o namespace na página layout-padrao: xmlns:sec="http://www.thymeleaf.org/extras/spring-security"
	- Agora acrescentar mais um <li> e colocar um th:text para exibir o nome, vamos acrescentar antes do botão, mas ainda dentro
		da tag <ul class= "nav navbar-nav..."
		
		<li>
			<p class="navbar-text" th:text="${#authentication.name}"></p>
		</li>
		
	- Dentro do nav class="aw-menu"... vamos configurar a liberação do link de acordo com o grau de acesso de usuario, exemplo, quem
		tem acesso só para pesquisa, nesse caso joao, ele só vai ver o link de pesquisa e a outra usuaria, maria, já tem acesso ao 
		link para cadastro de vinho.
		- É somente necessário criar uma lista <li> contendo sec:authorize="hasHole('ROLE_CADASTRAR_VINHO"). 
	
		<nav class="aw-menu  js-menu">
	      <ul class="aw-menu__list">
	        <li class="aw-menu__item" sec:authorize="hasRole('ROLE_CADASTRAR_VINHO')">
	          <a th:href="@{/vinhos/novo}"><i class="fa  fa-fw  fa-home"></i><span>Cadastro vinho</span></a>
	        </li>
	        
	- Testar todos os acessos e efetuar cadastro e listagem de vinhos para cada usuario, testando suas permissões.
	
	- Pensando: Se o joao não tem acesso para o cadastro, quando ele listar e aparecer um vinho ele não pode deletar o vinho, então não 
		é muito lógico deixar aparecendo o cesto de lixo quando ele listar os vinhos. Então vamos deixar invisivel esse cesto para o 
		joao e liberar esse acesso somente para maria.
		
		1:40:15
	        
		   